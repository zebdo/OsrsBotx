plugins {
    id 'java'
}

repositories {
    mavenLocal()
    maven { url 'https://repo.runelite.net' }
    mavenCentral()
}

static def getRuneLiteVersion() {
    URL url = new URL("http://repo.runelite.net/net/runelite/client/maven-metadata.xml")
    URLConnection urlConnection = url.openConnection()
    BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(urlConnection.getInputStream()))
    String latestName = null
    String inputLine
    while ((inputLine = bufferedReader.readLine()) != null) {
        inputLine = inputLine.trim()
        if (inputLine.contains("<release>")) {
            latestName = inputLine.replace("<release>", "").replace("</release>", "")
        }
    }
    bufferedReader.close()
    return latestName
}

// this needs an internet connection to build...
def checkForRecentVersion = true
def runeLiteVersion = "1.9.10"

if (checkForRecentVersion && runeLiteVersion != getRuneLiteVersion()) {
    println("Warning - client has been updated")
    throw new Exception("Out of date (last supported: " + runeLiteVersion + " current client: " + getRuneLiteVersion() + ")")
}

dependencies {
    implementation group: 'net.runelite', name: 'client', version: runeLiteVersion
    implementation group: 'net.runelite', name: 'cache', version: runeLiteVersion

    implementation 'org.projectlombok:lombok:1.18.24'
    annotationProcessor 'org.projectlombok:lombok:1.18.24'

    testImplementation 'junit:junit:4.13.2'
    testImplementation 'org.slf4j:slf4j-simple:2.0.5'
    testImplementation group: 'net.runelite', name: 'client', version: runeLiteVersion, {
        exclude group: 'ch.qos.logback', module: 'logback-classic'
    }

    implementation group: 'javassist', name: 'javassist', version: '3.12.1.GA'
    implementation group: 'net.sf.jopt-simple', name:'jopt-simple', version: '5.0.4'

    // jython stuff:
    // https://mavenlibs.com/maven/dependency/org.python/jython-standalone
    implementation group: 'org.python', name: 'jython-standalone', version: '2.7.3'
}

sourceSets {
    main {
        java {
            srcDirs= ["src/main/java"]
        }
        resources {
            srcDirs= ["src/main/resources"]
        }
    }
}

project.configurations.implementation.setCanBeResolved(true)
jar {
    manifest.attributes('Main-Class': 'net.runelite.rsb.botLauncher.Application')
    from {
        configurations.implementation.collect {it.isDirectory() ? it: zipTree(it)}
    }

    exclude 'META-INF/*.RSA'
    exclude 'META-INF/*.SF'
    exclude 'META-INF/*.DSA'

    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
    // options.deprecation = true
}

allprojects {
    gradle.projectsEvaluated {
        tasks.withType(JavaCompile) {
            options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
        }
    }
}
task botRun(type: JavaExec) {
    group = "Execution"
    description = "Runs the main method within RSB"
    classpath = sourceSets.main.runtimeClasspath + sourceSets.main.compileClasspath
    getMainClass() set "net.runelite.rsb.internal.launcher.Application"
    jvmArgs "-debug"
    args "--developer-mode".split(" ")

    dependsOn(jar)
}
